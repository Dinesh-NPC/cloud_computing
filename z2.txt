package org.cloudbus.cloudsim.examples;

import org.cloudbus.cloudsim.*;
import org.cloudbus.cloudsim.core.CloudSim;
import org.cloudbus.cloudsim.provisioners.*;

import java.util.*;

public class EconomicBasedScheduling_Simple {
    public static void main(String[] args) {
        try {
            CloudSim.init(1, Calendar.getInstance(), false);

            Datacenter datacenter = createDatacenter("Datacenter_0");
            DatacenterBroker broker = new DatacenterBroker("Broker_0");
            int brokerId = broker.getId();

            // Create 3 VMs
            List<Vm> vms = new ArrayList<>();
            for (int i = 0; i < 3; i++)
                vms.add(new Vm(i, brokerId, 1000, 1, 2048, 10000, 100000, "Xen", new CloudletSchedulerTimeShared()));
            broker.submitVmList(vms);

            // Create 5 Cloudlets with random length and economic cost
            List<Cloudlet> cloudlets = new ArrayList<>();
            double[] costs = new double[5];
            Random rand = new Random();

            for (int i = 0; i < 5; i++) {
                int len = 1000 + rand.nextInt(4000);
                costs[i] = 0.05 + rand.nextDouble() * 0.1;
                Cloudlet c = new Cloudlet(i, len, 1, 300, 300,
                        new UtilizationModelFull(), new UtilizationModelFull(), new UtilizationModelFull());
                c.setUserId(brokerId);
                cloudlets.add(c);
            }

            // Economic-SJF: sort by cost per length
            cloudlets.sort(Comparator.comparingDouble(c -> costs[c.getCloudletId()] / c.getCloudletLength()));

            // Assign cloudlets to VMs in round robin
            for (int i = 0; i < cloudlets.size(); i++)
                cloudlets.get(i).setVmId(vms.get(i % vms.size()).getId());

            // Display scheduling order
            System.out.println("Economic-SJF Cloudlet Scheduling:");
            for (Cloudlet c : cloudlets) {
                System.out.printf("Cloudlet %d - Length: %d, Cost: %.4f, Assigned VM: %d\n",
                        c.getCloudletId(), c.getCloudletLength(), costs[c.getCloudletId()], c.getVmId());
            }

            broker.submitCloudletList(cloudlets);
            CloudSim.startSimulation();
            List<Cloudlet> results = broker.getCloudletReceivedList();
            CloudSim.stopSimulation();

            // Show simulation output
            System.out.println("\n====== SIMULATION RESULTS ======");
            System.out.printf("%-10s %-6s %-15s %-6s %-8s %-12s %-12s\n",
                    "Cloudlet", "Status", "Datacenter", "VM", "Time", "Start", "Finish");
            for (Cloudlet c : results) {
                System.out.printf("%-10d %-6s %-15d %-6d %-8.2f %-12.2f %-12.2f\n",
                        c.getCloudletId(), "SUCCESS", c.getResourceId(), c.getVmId(),
                        c.getActualCPUTime(), c.getExecStartTime(), c.getFinishTime());
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static Datacenter createDatacenter(String name) throws Exception {
        List<Pe> peList = List.of(new Pe(0, new PeProvisionerSimple(1000)));
        List<Host> hostList = List.of(new Host(0,
                new RamProvisionerSimple(4096),
                new BwProvisionerSimple(10000),
                100000, peList,
                new VmSchedulerTimeShared(peList)));

        DatacenterCharacteristics characteristics = new DatacenterCharacteristics(
                "x86", "Linux", "Xen", hostList,
                10.0, 3.0, 0.05, 0.001, 0.02);

        return new Datacenter(name, characteristics, new VmAllocationPolicySimple(hostList), new ArrayList<>(), 0);
    }
}
